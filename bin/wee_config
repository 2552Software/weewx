#!/usr/bin/env python
#
#    Copyright (c) 2009-2015 Tom Keffer <tkeffer@gmail.com>
#
#    See the file LICENSE.txt for your full rights.
#
"""Configure the configuration file."""
from __future__ import with_statement

import os
import shutil
import sys
import syslog
import optparse
import tempfile

import configobj

import weewx
import weeutil.config
from weeutil.config import save_path, mkdir, _as_string

my_dir = os.path.abspath(os.path.dirname(__file__))
search_locations = [os.path.normpath(os.path.join(my_dir, '..')), '/etc/weewx', '/home/weewx']

minor_comment_block = [""]
major_comment_block = ["", "##############################################################################", ""]

usage="""wee_config --help
       wee_config --version
       wee_config --list-drivers
       wee_config --update CONFIG_FILE|--config=CONFIG_FILE --dist-config=DIST_CONFIG
           [--output=OUTFILE] [--no-prompt]
       wee_config --merge  CONFIG_FILE|--config=CONFIG_FILE --dist-config=DIST_CONFIG 
           --output=OUTFILE
       wee_config --modify CONFIG_FILE|--config=CONFIG_FILE
           [--driver=(DRIVER|prompt)]
           [--latitude=yy.y] [--longitude=xx.x] [--altitude=zz.z,(foot|meter)] 
           [--description="Home Sweet Home"] [--units=(us|metric)]
           [--output=OUTFILE] [--no-prompt]
           
COMMANDS:

--help         Print instructions, then exit.
--version      Print the version of weewx, then exit.
--list-drivers List the available weewx device drivers, then exit.
--update       Update the contents of configuration file CONFIG_FILE,
               then merge the result with the contents of a default
               configuration file DIST_CONFIG.  The results will be
               written to CONFIG_FILE unless an OUTFILE is specified.               
--merge        Merge the contents of configuration file CONFIG_FILE with
               the contents of DIST_CONFIG, saving the result to OUTFILE.
               DIST_CONFIG and OUTFILE must be specified.
--modify       Modify the configuration file, prompting as necessary.

wee_config is used to configure your weewx configuration file (nominally,
weewx.conf). Its location can be given as a command-line argument, 
or it can be specified with option --config.
"""

def main():

    # Set defaults for the system logger:
    syslog.openlog('wee_config', syslog.LOG_PID|syslog.LOG_CONS)

    # Create a command line parser:
    parser = optparse.OptionParser(usage=usage)
    
    # Add the various options:
    parser.add_option("--version", action="store_true",
                      help="Print the version of weewx and exit.")
    parser.add_option("--list-drivers", action="store_true",
                     help="List all the available weewx device drivers, then exit.")
    parser.add_option("--update", action="store_true",
                      help="Update an existing configuration file to the current version, then merge "
                      "with DIST_CONFIG. Save to OUT_CONFIG or, if not given, a timestamped backup.")
    parser.add_option("--merge", action="store_true",
                      help="Update an existing configuration file to the current version, then merge "
                      "with DIST_C ONFIG. Save to OUT_CONFIG.")
    parser.add_option("--modify", action="store_true",
                      help="Modify the configuration file. Prompt as necessary. Use this to add "
                      "a new driver.")
    parser.add_option("--config", dest="config_path", metavar="CONFIG_FILE",
                      help="Use configuration file CONFIG_FILE.")
    parser.add_option("--dist-config",
                      help="Path to the new, incoming configuration file. This is usually supplied "
                      "by a distribution.")
    parser.add_option("--output", metavar="OUT_CONFIG",
                      help="Where the results should be written.")
    parser.add_option("--no-prompt", action="store_true",
                      help="Do not issue prompts. Use default values or specified options.")
    parser.add_option("--driver", metavar="(DRIVER|prompt)", dest="driver",
                      help="Add the specified driver DRIVER to the configuration file. "
                      "If --driver=prompt is used, you will be prompted for the driver name.")
    parser.add_option("--latitude", metavar="yy.y",
                      help="The station latitude")
    parser.add_option("--longitude", metavar="xx.x",
                      help="The station longitude")
    parser.add_option("--altitude", metavar="zz,(foot|meter)",
                      help="The station altitude in either feet or meters. E.g., '750,foot'")
    parser.add_option("--description",
                      help="""A text description of the station. For example, "Santa's workshop, North Pole" """)
    parser.add_option("--units", choices=["us", "metric"], metavar="(metric|us)",
                      help="Set display units to 'metric' or 'us'")

    # Now we are ready to parse the command line:
    (options, args) = parser.parse_args()
    
    if options.version:
        print weewx.__version__
        sys.exit(0)

    if options.list_drivers:
        print_drivers()
        sys.exit(0)
    
    # Get the configuration file:
    config_path, config_dict = weeutil.config.read_config(options.config_path, args, locations=search_locations)

    # Flag for whether the output needs to be saved:
    save_me = False
    
    if options.merge:
        command_merge(config_dict, template=options.template)
        save_me = True
        
    if save_me:
        
        # Save the resultant config file, backing up as necessary.
        
        if options.output:
            fd = open(options.output, 'w')
            config_dict.write(fd)
            fd.close()
        else:
            # Get a temporary file:
            tmpfile = tempfile.NamedTemporaryFile("w")
            
            # Write the merged configuration file to it:
            config_dict.write(tmpfile)
            tmpfile.flush()
            
            # Save the old config file if it exists:
            if os.path.exists(config_path):
                backup_path = weeutil.config.save_path(config_path)
                print "Saved old configuration file as %s" % backup_path
                
            # Now install the temporary file (holding the merged config data)
            # into the proper place:
            shutil.copyfile(tmpfile.name, config_path)
            
            sys.exit(0)

    else:
        sys.exit("Nothing done.")
    return 0

def command_merge(config_dict, template):
    
    if not template:
        print >>sys.stdout, "Merge command requires template file"
        exit(1)

    # Open up and parse the template:
    try:        
        template_dict = configobj.ConfigObj(template, file_error=True)
    except SyntaxError, e:
        print >>sys.stdout, "Syntax error in template '%s': %s" % (template, e)
        exit(1)

    weeutil.config.merge_config(config_dict, template_dict)

    
def get_station_info(config_dict):
    """Extract station info from config dictionary."""
    stn_info = dict()
    if config_dict is not None and 'Station' in config_dict:
        stn_info['location'] = _as_string(config_dict['Station'].get('location'))
        stn_info['latitude'] = config_dict['Station'].get('latitude')
        stn_info['longitude'] = config_dict['Station'].get('longitude')
        stn_info['altitude'] = config_dict['Station'].get('altitude')
        if 'station_type' in config_dict['Station']:
            stn_info['station_type'] = config_dict['Station']['station_type']
            if stn_info['station_type'] in config_dict:
                stn_info['driver'] = config_dict[stn_info['station_type']]['driver']
    return stn_info

def prompt_for_driver(dflt_driver=None):
    """Get the information about each driver, return as a dictionary."""
    infos = weeutil.config.get_driver_infos()
    keys = sorted(infos)
    dflt_idx = None
    for i, d in enumerate(keys):
        print " %2d) %-15s (%s)" % (i, infos[d].get('name', '?'), d)
        if dflt_driver == d:
            dflt_idx = i
    msg = "choose a driver [%d]: " % dflt_idx if dflt_idx is not None else "choose a driver: "
    ans = None
    while ans is None:
        ans = raw_input(msg).strip()
        if not ans:
            ans = dflt_idx
        try:
            idx = int(ans)
            if idx < 0 or idx >= len(keys):
                ans = None
        except (ValueError, TypeError):
            ans = None
    return keys[idx]

def prompt_for_driver_settings(driver):
    """Let the driver prompt for any required settings."""
    settings = dict()
    __import__(driver)
    driver_module = sys.modules[driver]
    loader_function = getattr(driver_module, 'confeditor_loader')
    editor = loader_function()
    settings[driver_module.DRIVER_NAME] = editor.prompt_for_settings()
    return settings


def print_drivers():
    """Get information about all the available drivers, then print it out."""
    driver_info_dict = weeutil.config.get_driver_infos()
    keys = sorted(driver_info_dict)
    for d in keys:
        msg = "%-25s" % d
        for x in ['name', 'version', 'fail']:
            if x in driver_info_dict[d]:
                msg += " %-15s" % driver_info_dict[d][x]
        print msg



if __name__=="__main__" :
    main()
    
