#!/usr/bin/env python
#
#    Copyright (c) 2014-2015 Tom Keffer <tkeffer@gmail.com>
#
#    See the file LICENSE.txt for your full rights.
#
#    $Id: wee_config_database 2763 2014-12-02 01:16:13Z tkeffer $
#

"""Configure the configuration file"""
from __future__ import with_statement

import os
import sys
import syslog
import optparse
import shutil
import glob

import configobj

import weeutil.config
from weeutil.config import save_path, mkdir, _as_string

my_dir = os.path.abspath(os.path.dirname(__file__))
search_locations = [os.path.normpath(os.path.join(my_dir, '..')), '/etc/weewx', '/home/weewx']

minor_comment_block = [""]
major_comment_block = ["", "##############################################################################", ""]

description="""Use this utility to configure the weewx configuration file weewx.conf."""
 
usage="""%prog: [config_path]
                   [--config=CONFIG_PATH] [--help]
                   [--units=(metric|us)]
                   [--driver[=DRIVER]]
                   [--station]
                   [--merge-config --a=A --b=B --c=C]
                   [--no-prompt]
                   [--version]
                   [--help]
       The path to the config file can be specified as either a
       command-line argument, or by using option --config. """

def main():

    # Set defaults for the system logger:
    syslog.openlog('wee_config', syslog.LOG_PID|syslog.LOG_CONS)

    # Create a command line parser:
    parser = optparse.OptionParser(description=description, usage=usage)
    
    # Add the various options:
    parser.add_option("--config", dest="config_path", type=str, metavar="CONFIG_PATH",
                      help="Use configuration file CONFIG_PATH. Default is /etc/weewx/weewx.conf or /home/weewx/weewx.conf.")
    parser.add_option("--units", metavar="(metric|us)",
                      help="Set display units to 'metric' or 'us'")
    parser.add_option("--driver", metavar="DRIVER", 
                      help="Install and configure driver DRIVER. If missing, then prompt for driver.")
    parser.add_option("--station",
                      help="Prompt for lat, lon and station description.")
    parser.add_option("--merge-config", action="store_true",
                      help="Merge config file A with config file B. Put results in C. Requires options --a, --b, and --c")
    parser.add_option("--a", metavar="A", 
                      help="First source file. Used only with option --merge-config")
    parser.add_option("--b", metavar="B",
                      help="Second source file. Used only with option --merge-config")
    parser.add_option("--c", metavar="C",
                      help="Destination for merge.")
    parser.add_option("--no-prompt", action="store_true",
                      help="Do not issue prompts before reading response.")

    # Now we are ready to parse the command line:
    (options, args) = parser.parse_args()

    info = dict()

    # Find the config file, if possible:
    try:
        config_path = weeutil.config.find_file(options.config_path, args, locations=search_locations)
        print "Using configuration file %s" % config_path
        try:        
            # Now open it up and parse it.
            config_dict = configobj.ConfigObj(config_path, file_error=True)
            # Extract the station info and save it:
            info.update(get_station_info(config_dict))
        except SyntaxError, e:
            print >>sys.stdout, "Syntax error in file '%s': %s" % (config_path, e)
            exit(1)
    except IOError:
        config_path = None

    if options.units is not None:
        info['units'] = options.units.lower()
    if options.driver is not None:
        info['driver'] = options.driver
    if not options.noprompt:
        info.update(prompt_for_info(dflt_loc=info.get('location'),
                                    dflt_lat=info.get('latitude'),
                                    dflt_lon=info.get('longitude'),
                                    dflt_alt=info.get('altitude'),
                                    dflt_units=info.get('units')))
        if options.driver is None:
            info['driver'] = prompt_for_driver(info.get('driver'))
            info.update(prompt_for_driver_settings(info['driver']))

    configure_conf(options.config_path, info, options.dryrun)
    return 0

def get_driver_infos():
    """Scan the drivers folder, extracting information about each available driver.
    Return as a dictionary, keyed by driver name."""
    
    import weewx.drivers
    driver_directory = os.path.dirname(os.path.abspath(weewx.drivers.__file__))
    driver_list = [ os.path.basename(f) for f in glob.glob(os.path.join(driver_directory, "*.py"))]

    driver_info_dict = {}
    for driver_file in driver_list:
        if driver_file == '__init__.py':
            continue
        # Get the driver module name. This will be something like 'weewx.drivers.fousb'
        driver = os.path.splitext("weewx.drivers.%s" % driver_file)[0]
        # Create an entry for it
        driver_info_dict[driver] = dict()
        try:
            # Now import the driver, and extract info about it
            __import__(driver)
            driver_module = sys.modules[driver]
            driver_info_dict[driver]['name'] = driver_module.DRIVER_NAME
            driver_info_dict[driver]['version'] = driver_module.DRIVER_VERSION
        except Exception, e:
            driver_info_dict[driver]['name'] = driver
            driver_info_dict[driver]['fail'] = "%s" % e

    return driver_info_dict

def print_drivers():
    driver_info_dict = get_driver_infos()
    keys = sorted(driver_info_dict)
    for d in keys:
        msg = "%-25s" % d
        for x in ['name', 'version', 'fail']:
            if x in driver_info_dict[d]:
                msg += " %-15s" % driver_info_dict[d][x]
        print msg

def configure_conf(config_path, info, dryrun=False):
    """Configure the configuration file with station info and driver details"""
    # FIXME: this emits a functional config file, but the comments and indents
    # may be messed up.

    # Load the configuration file.  If we cannot find it, complain and bail.
    if config_path is None:
        config_path = get_conf_filename()
    if config_path is None:
        print "Cannot determine location of configuration file"
        return
    print 'Using configuration file %s' % config_path

    # Try to load the driver so we can use its configuration editor.  If that
    # fails for any reason, complain about it and bail out.
    driver = info.get('driver') if info is not None else None

    editor = driver_name = driver_vers = None
    if driver is not None:
#         # adjust system path so we can load the driver
#         tmp_path = list(sys.path)
#         sys.path.insert(0, bin_dir)

        try:
            editor, driver_name, driver_vers = load_editor(driver)
        except Exception, e:
            print "Driver %s failed to load: %s" % (driver, e)
            return
        print 'Using %s version %s (%s)' % (driver_name, driver_vers, driver)

#         # reset the system path
#         sys.path = tmp_path

    # read the original configuration
    config = configobj.ConfigObj(config_path, interpolation=False)

    # determine what driver-specific stanza we will need
    stanza = None
    if editor is not None:
        orig_stanza_text = None

        # if a previous stanza exists for this driver, grab it
        if driver_name in config:
            orig_stanza = configobj.ConfigObj(interpolation=False)
            orig_stanza[driver_name] = config[driver_name]
            orig_stanza_text = '\n'.join(orig_stanza.write())

        # let the driver process the stanza or give us a new one
        stanza_text = editor.get_conf(orig_stanza_text)
        stanza = configobj.ConfigObj(stanza_text.splitlines())

    # put the new stanza immediately after [Station]
    if stanza is not None and 'Station' in config:
        # insert the stanza
        config[driver_name] = stanza[driver_name]
        config.comments[driver_name] = major_comment_block
        # reorder the sections
        idx = config.sections.index(driver_name)
        config.sections.pop(idx)
        idx = config.sections.index('Station')
        config.sections = config.sections[0:idx+1] + [driver_name] + config.sections[idx+1:]
        # make the stanza the station type
        config['Station']['station_type'] = driver_name

    # apply any overrides from the info
    if info is not None:
        # update driver stanza with any overrides from info
        if driver_name in info:
            for k in info[driver_name]:
                config[driver_name][k] = info[driver_name][k]
        # update station information with info overrides
        for p in ['location', 'latitude', 'longitude', 'altitude']:
            if info.get(p) is not None:
                config['Station'][p] = info[p]
        # update units display with any info overrides
        if info.get('units') is not None:
            if info.get('units') == 'metric':
                print "Using Metric units for display"
                config['StdReport']['StandardReport'].update({
                        'Units': {
                            'Groups': {
                                'group_altitude': 'meter',
                                'group_degree_day': 'degree_C_day',
                                'group_pressure': 'mbar',
                                'group_rain': 'mm',
                                'group_rainrate': 'mm_per_hour',
                                'group_speed': 'meter_per_second',
                                'group_speed2': 'meter_per_second2',
                                'group_temperature': 'degree_C'}}})
            elif info.get('units') == 'us':
                print "Using US units for display"
                config['StdReport']['StandardReport'].update({
                        'Units': {
                            'Groups': {
                                'group_altitude': 'foot',
                                'group_degree_day': 'degree_F_day',
                                'group_pressure': 'inHg',
                                'group_rain': 'inch',
                                'group_rainrate': 'inch_per_hour',
                                'group_speed': 'mile_per_hour',
                                'group_speed2': 'mile_per_hour2',
                                'group_temperature': 'degree_F'}}})

    # save the new configuration
    config.filename = "%s.tmp" % config_path
    config.write()

    # move the original aside
    if not dryrun:
        save_path(config_path)
        shutil.move(config.filename, config_path)

def load_editor(driver):
    """Load the configuration editor from the driver file"""
    __import__(driver)
    driver_module = sys.modules[driver]
    loader_function = getattr(driver_module, 'confeditor_loader')
    editor = loader_function()
    return editor, driver_module.DRIVER_NAME, driver_module.DRIVER_VERSION

def prompt_for_driver(dflt_driver=None):
    """Get the information about each driver, return as a dictionary."""
    infos = get_driver_infos()
    keys = sorted(infos)
    dflt_idx = None
    for i, d in enumerate(keys):
        print " %2d) %-15s (%s)" % (i, infos[d].get('name', '?'), d)
        if dflt_driver == d:
            dflt_idx = i
    msg = "choose a driver [%d]: " % dflt_idx if dflt_idx is not None else "choose a driver: "
    ans = None
    while ans is None:
        ans = raw_input(msg)
        if len(ans.strip()) == 0:
            ans = dflt_idx
        try:
            idx = int(ans)
            if idx < 0 or idx >= len(keys):
                ans = None
        except (ValueError, TypeError):
            ans = None
    return keys[idx]

def prompt_for_driver_settings(driver):
    """Let the driver prompt for any required settings."""
    settings = dict()
    __import__(driver)
    driver_module = sys.modules[driver]
    loader_function = getattr(driver_module, 'confeditor_loader')
    editor = loader_function()
    settings[driver_module.DRIVER_NAME] = editor.prompt_for_settings()
    return settings


def prompt_for_info(dflt_loc=None, dflt_lat='90.000', dflt_lon='0.000',
                    dflt_alt=['0', 'meter'], dflt_units='metric'):
    print "Enter a brief description of the station, such as its location.  For example:"
    print "Santa's Workshop, North Pole"
    msg = "description: [%s]: " % dflt_loc if dflt_loc is not None else "description: "
    loc = None
    while loc is None:
        ans = raw_input(msg).strip()
        if ans:
            loc = ans
        elif dflt_loc is not None:
            loc = dflt_loc
        else:
            loc = None
    print "Specify altitude, with units 'foot' or 'meter'.  For example:"
    print "35, foot"
    print "12, meter"
    msg = "altitude: "
    if dflt_alt is not None:
        msg = "altitude [%s, %s]: " % dflt_alt
    alt = None
    while alt is None:
        ans = raw_input(msg)
        if len(ans.strip()) == 0:
            alt = dflt_alt
        elif ans.find(',') >= 0:
            parts = ans.split(',')
            try:
                float(parts[0])
                if parts[1].strip() in ['foot', 'meter']:
                    alt = [parts[0].strip(), parts[1].strip()]
                else:
                    alt = None
            except (ValueError, TypeError):
                alt = None
        else:
            alt = None
    print "Specify latitude in decimal degrees, negative for south."
    msg = "latitude [%s]: " % dflt_lat if dflt_lat is not None else "latitude: "
    lat = None
    while lat is None:
        ans = raw_input(msg)
        if len(ans.strip()) == 0:
            ans = dflt_lat
        try:
            lat = float(ans)
            if lat < -90 or lat > 90:
                lat = None
        except (ValueError, TypeError):
            lat = None
    print "Specify longitude in decimal degrees, negative for west."
    msg = "longitude [%s]: " % dflt_lon if dflt_lon is not None else "longitude: "
    lon = None
    while lon is None:
        ans = raw_input(msg)
        if len(ans.strip()) == 0:
            ans = dflt_lon
        try:
            lon = float(ans)
            if lon < -180 or lon > 180:
                lon = None
        except (ValueError, TypeError):
            lon = None
    print "Indicate the preferred units for display: 'metric' or 'us'"
    msg = "units [%s]: " % dflt_units if dflt_units is not None else "units: "
    units = None
    while units is None:
        ans = raw_input(msg)
        if len(ans.strip()) == 0 and dflt_units is not None:
            units = dflt_units
        elif ans.lower() in ['metric', 'us']:
            units = ans.lower()
        else:
            units = None
    return {'location': loc,
            'altitude': alt,
            'latitude': lat,
            'longitude': lon,
            'units': units}

def get_station_info(config_dict):
    """Extract station info from config dictionary."""
    stn_info = dict()
    if config_dict is not None and 'Station' in config_dict:
        stn_info['location'] = _as_string(config_dict['Station'].get('location'))
        stn_info['latitude'] = config_dict['Station'].get('latitude')
        stn_info['longitude'] = config_dict['Station'].get('longitude')
        stn_info['altitude'] = config_dict['Station'].get('altitude')
        if 'station_type' in config_dict['Station']:
            stn_info['station_type'] = config_dict['Station']['station_type']
            if stn_info['station_type'] in config_dict:
                stn_info['driver'] = config_dict[stn_info['station_type']]['driver']
    return stn_info

def get_conf_filename():
    """Find the full path to weewx.conf.  First look for a setup.cfg file in
    the same directory from which setup.py was run.  If we find one, use
    the contents to determine the location of weewx.conf.  If no setup.cfg,
    then use the location of setup.py to guess the location of weewx.conf.
    If setup.py is in /usr/share/weewx then this is a deb/rpm install, so
    weewx.conf is in /etc/weewx.conf.  Anywhere else and the weewx.conf will
    be in the same directory as setup.py.  Anything other than that we do
    not recognize, and the weewx.conf must be specified explicitly."""
    # FIXME: if someone specifies --home or --prefix then this will break
 
    # try to find the directory in which weewx.conf is or will be installed
    idir = None
    fn = os.path.join(this_dir, 'setup.cfg')
    if os.path.exists(fn):
        # look in the location specified by setup.cfg
        setup_dict = configobj.ConfigObj(fn)
        if ('install' in setup_dict and
            setup_dict['install'].get('home') is not None):
            idir = setup_dict['install'].get('home')
    elif this_dir == '/usr/share/weewx' or this_dir == '/usr/bin':
        # this is a deb or rpm install
        idir = '/etc/weewx'
    else:
        idir = this_dir
    if idir is None:
        return None
    return "%s/weewx.conf" % idir

if __name__=="__main__" :
    print_drivers()
    #main()
    