#!/usr/bin/env python
#
#    Copyright (c) 2009-2015 Tom Keffer <tkeffer@gmail.com>
#
#    See the file LICENSE.txt for your full rights.
#
"""Configure the configuration file."""
from __future__ import with_statement

import os
import sys
import syslog
import optparse
import shutil
import glob

import configobj

import weewx
import weeutil.config
from weeutil.config import save_path, mkdir, _as_string

my_dir = os.path.abspath(os.path.dirname(__file__))
search_locations = [os.path.normpath(os.path.join(my_dir, '..')), '/etc/weewx', '/home/weewx']

minor_comment_block = [""]
major_comment_block = ["", "##############################################################################", ""]

usage="""wee_config --help
       wee_config --version
       wee_config list-drivers
       wee_config merge CONFIG_FILE|--config=CONFIG_FILE --template=TEMPLATE_FILE 
           [--output=OUTFILE] [--no-prompt]
       wee_config driver CONFIG_FILE|--config=CONFIG_FILE 
           [--driver[=DRIVER]] [--no-prompt]
       wee_config station CONFIG_FILE|--config=CONFIG_FILE 
           [--latitude=yy.y] [--longitude=xx.x] [--foot-altitude=FEET|--meter-altitude=METERS] 
           [--description="Home Sweet Home"] [--no-prompt]
       wee_config reports CONFIG_FILE|--config=CONFIG_FILE 
           [--units=(us|metric)] [--no-prompt]

wee_config is used to configure your weewx configuration file (nominally, weewx.conf).
Its location can be given as a command-line argument, or it can be specified 
with option --config.

By default, the final results are writen to the same file name as the
configuration file. The original is backed up first. Alternatively, it
will be written to the destination given by the --output option.

COMMANDS:

--version    Print the version of weewx, then exit.
list-drivers List the available weewx device drivers.
merge        Update an existing configuration file, then merge it into a template, 
             overwriting any options. The results can be written to a specified 
             destination OUTFILE or, if not specified, to the original
             configuration file (a backup will be made).
driver       Add the specified driver to the configuration file, prompting if necessary.
station      Configuration the [Station] stanza, prompting if necessary.
reports      Configure the report StdReport.
"""

def main():

    # Set defaults for the system logger:
    syslog.openlog('wee_config', syslog.LOG_PID|syslog.LOG_CONS)

    # Create a command line parser:
    parser = optparse.OptionParser(usage=usage)
    
    # Add the various options:
    parser.add_option("--version", action="store_true",
                      help="Print the version of weewx and exit.")
    parser.add_option("--config", dest="config_path", metavar="CONFIG_FILE",
                      help="Use configuration file CONFIG_FILE. Default is /etc/weewx/weewx.conf or /home/weewx/weewx.conf.")
    parser.add_option("--no-prompt", action="store_true",
                      help="Do not issue prompts. Take all options from the command-line.")
    parser.add_option("--template", metavar="TEMPLATE_FILE",
                      help="Start with the template TEMPLATE_FILE. The configuration file will be merged into this, " 
                      "overwriting any keys.")
    parser.add_option("--output", metavar="OUTPUT_FILE",
                      help="Where the results should be put. The default is to overwrite CONFIG_FILE, saving a backup first")
    parser.add_option("--driver", metavar="DRIVER_PATH", 
                      help="The path of the driver to be installed")
    parser.add_option("--latitude", metavar="yy.y",
                      help="The station latitude")
    parser.add_option("--longitude", metavar="xx.x",
                      help="The station longitude")
    parser.add_option("--foot-altitude", metavar="FEET",
                      help="The station altitude in feet")
    parser.add_option("--meter-altitude", metavar="METER",
                      help="The station altitude in meters")
    parser.add_option("--description",
                      help="""A text description of the station. For example, "Santa's workshop, North Pole" """)
    parser.add_option("--units", choices=["us", "metric"], metavar="(metric|us)",
                      help="Set display units to 'metric' or 'us'")

    # Now we are ready to parse the command line:
    (options, args) = parser.parse_args()

    if options.version:
        print weewx.__version__
        exit(0)

    # Find the config file, if possible:
    try:
        config_path = weeutil.config.find_file(options.config_path, args, locations=search_locations)
        print "Using configuration file %s" % config_path
        try:        
            # Now open it up and parse it.
            config_dict = configobj.ConfigObj(config_path, file_error=True)
        except SyntaxError, e:
            print >>sys.stdout, "Syntax error in file '%s': %s" % (config_path, e)
            exit(1)
    except weeutil.config.ConfigPathError, e:
        if options.template:
            print >>sys.stdout, "Unable to find 'weewx.conf'."
            print >>sys.stdout, "Error: %s" % e
            exit(1)

    if options.list_drivers:
        print_drivers()
        exit(0)
        
    if options.template:
        try:        
            # Open up and parse the template:
            template_dict = configobj.ConfigObj(options.template, file_error=True)
        except SyntaxError, e:
            print >>sys.stdout, "Syntax error in config template '%s': %s" % (options.template, e)
            exit(1)
        merge_template(options.template, config_dict)
        
    # Extract the station info from the config file:
    info = get_station_info(config_dict)

    # Add any command-line options:
    if options.units is not None:
        info['units'] = options.units.lower()
    if options.driver is not None:
        info['driver'] = options.driver
    # Unless --no-prompt has been specified, give the user a chance to
    # customize the info keys:
    if not options.no_prompt:
        info.update(prompt_for_info(**info))
        if options.driver is None:
            info['driver'] = prompt_for_driver(info.get('driver'))
            info.update(prompt_for_driver_settings(info['driver']))
            
    print info
    exit()

    configure_conf(config_path, config_dict, info, options.dryrun)
    return 0

def get_station_info(config_dict):
    """Extract station info from config dictionary."""
    stn_info = dict()
    if config_dict is not None and 'Station' in config_dict:
        stn_info['location'] = _as_string(config_dict['Station'].get('location'))
        stn_info['latitude'] = config_dict['Station'].get('latitude')
        stn_info['longitude'] = config_dict['Station'].get('longitude')
        stn_info['altitude'] = config_dict['Station'].get('altitude')
        if 'station_type' in config_dict['Station']:
            stn_info['station_type'] = config_dict['Station']['station_type']
            if stn_info['station_type'] in config_dict:
                stn_info['driver'] = config_dict[stn_info['station_type']]['driver']
    return stn_info

def prompt_for_info(location=None, latitude=90.0, longitude=0.0,
                    altitude=(0, 'meter'), units='metric', **kwargs):
    
    # --- LOCATION ---
    print "Enter a brief description of the station, such as its location.  For example:"
    print "Santa's Workshop, North Pole"
    msg = "description [%s] > " % location if location is not None else "description > "
    ans = None
    while ans is None:
        ans = raw_input(msg).strip()
        if ans:
            location = ans

    # --- ALTITUDE ---
    print "Specify altitude, with units 'foot' or 'meter'.  For example:"
    print "35, foot"
    print "12, meter"
    msg = "altitude > " if altitude is None else "altitude [%s, %s] > " % tuple(altitude)

    ans = None
    while ans is None:
        ans = raw_input(msg).strip().lower()
        if ans and ans.find(',') > 0:
            parts = ans.split(',')
            try:
                unit = parts[1].strip()
                if unit in ['foot', 'meter']:
                    altitude = [float(parts[0].strip()), unit]
                else:
                    ans = None
            except (ValueError, TypeError):
                print >>sys.stderr, "Invalid response."
                ans = None
        elif ans == '':
            break
        else:
            ans = None

    # --- LATITUDE ---
    print "Specify latitude in decimal degrees, negative for south."
    msg = "latitude > " if latitude is None else "latitude [%s] > " % latitude 
    ans = None
    while ans is None:
        ans = raw_input(msg).strip()
        if ans:
            try:
                latitude = float(ans)
                if latitude < -90 or latitude > 90:
                    ans = None
            except (ValueError, TypeError):
                print >>sys.stderr, "Invalid response."
                ans = None
        elif ans == '':
            break
        else:
            ans = None
            
    # --- LONGITUDE ---
    print "Specify longitude in decimal degrees, negative for west."
    msg = "longitude > " if longitude is None else "longitude [%s] > " % longitude 
    ans = None
    while ans is None:
        ans = raw_input(msg).strip()
        if ans:
            try:
                longitude = float(ans)
                if latitude < -180 or latitude > 180:
                    ans = None
            except (ValueError, TypeError):
                print >>sys.stderr, "Invalid response."
                ans = None
        elif ans == '':
            break
        else:
            ans = None

    # --- UNITs ---
    print "Indicate the preferred units for display: 'metric' or 'us'"
    msg =  "units > " if units is None else "units [%s] > " % units
    ans = None
    while ans is None:
        ans = raw_input(msg).strip().lower()
        if ans in ['metric', 'us']:
            units = ans
        elif ans=='':
            break
        else:
            print >>sys.stderr, "Unrecognized response. Please try again."
            ans = None

    # Return the final results:
    return {'location' : location,
            'altitude' : altitude,
            'latitude' : latitude,
            'longitude': longitude,
            'units'    : units}

def prompt_for_driver(dflt_driver=None):
    """Get the information about each driver, return as a dictionary."""
    infos = get_driver_infos()
    keys = sorted(infos)
    dflt_idx = None
    for i, d in enumerate(keys):
        print " %2d) %-15s (%s)" % (i, infos[d].get('name', '?'), d)
        if dflt_driver == d:
            dflt_idx = i
    msg = "choose a driver [%d]: " % dflt_idx if dflt_idx is not None else "choose a driver: "
    ans = None
    while ans is None:
        ans = raw_input(msg).strip()
        if not ans:
            ans = dflt_idx
        try:
            idx = int(ans)
            if idx < 0 or idx >= len(keys):
                ans = None
        except (ValueError, TypeError):
            ans = None
    return keys[idx]

def prompt_for_driver_settings(driver):
    """Let the driver prompt for any required settings."""
    settings = dict()
    __import__(driver)
    driver_module = sys.modules[driver]
    loader_function = getattr(driver_module, 'confeditor_loader')
    editor = loader_function()
    settings[driver_module.DRIVER_NAME] = editor.prompt_for_settings()
    return settings

def configure_conf(config_path, config_dict, info, dryrun=False):
    """Configure the configuration file with station info and driver details"""

    # Try to load the driver so we can use its configuration editor.  If that
    # fails for any reason, complain about it and bail out.
    driver = info.get('driver') if info is not None else None

    editor = driver_name = driver_vers = None
    if driver is not None:

        try:
            editor, driver_name, driver_vers = load_editor(driver)
        except Exception, e:
            print "Driver %s failed to load: %s" % (driver, e)
            return
        print 'Using %s version %s (%s)' % (driver_name, driver_vers, driver)

    # determine what driver-specific stanza we will need
    stanza = None
    if editor is not None:
        orig_stanza_text = None

        # if a previous stanza exists for this driver, grab it
        if driver_name in config_dict:
            orig_stanza = configobj.ConfigObj(interpolation=False)
            orig_stanza[driver_name] = config_dict[driver_name]
            orig_stanza_text = '\n'.join(orig_stanza.write())

        # let the driver process the stanza or give us a new one
        stanza_text = editor.get_conf(orig_stanza_text)
        stanza = configobj.ConfigObj(stanza_text.splitlines())

    # put the new stanza immediately after [Station]
    if stanza is not None and 'Station' in config_dict:
        # insert the stanza
        config_dict[driver_name] = stanza[driver_name]
        config_dict.comments[driver_name] = major_comment_block
        # reorder the sections
        idx = config_dict.sections.index(driver_name)
        config_dict.sections.pop(idx)
        idx = config_dict.sections.index('Station')
        config_dict.sections = config_dict.sections[0:idx+1] + [driver_name] + config_dict.sections[idx+1:]
        # make the stanza the station type
        config_dict['Station']['station_type'] = driver_name

    # apply any overrides from the info
    if info is not None:
        # update driver stanza with any overrides from info
        if driver_name in info:
            for k in info[driver_name]:
                config_dict[driver_name][k] = info[driver_name][k]
        # update station information with info overrides
        for p in ['location', 'latitude', 'longitude', 'altitude']:
            if info.get(p) is not None:
                config_dict['Station'][p] = info[p]
        # update units display with any info overrides
        if info.get('units') is not None:
            if info.get('units') == 'metric':
                print "Using Metric units for display"
                config_dict['StdReport']['StandardReport'].update({
                        'Units': {
                            'Groups': {
                                'group_altitude': 'meter',
                                'group_degree_day': 'degree_C_day',
                                'group_pressure': 'mbar',
                                'group_rain': 'mm',
                                'group_rainrate': 'mm_per_hour',
                                'group_speed': 'meter_per_second',
                                'group_speed2': 'meter_per_second2',
                                'group_temperature': 'degree_C'}}})
            elif info.get('units') == 'us':
                print "Using US units for display"
                config_dict['StdReport']['StandardReport'].update({
                        'Units': {
                            'Groups': {
                                'group_altitude': 'foot',
                                'group_degree_day': 'degree_F_day',
                                'group_pressure': 'inHg',
                                'group_rain': 'inch',
                                'group_rainrate': 'inch_per_hour',
                                'group_speed': 'mile_per_hour',
                                'group_speed2': 'mile_per_hour2',
                                'group_temperature': 'degree_F'}}})

    # save the new configuration
    config_dict.filename = "%s.tmp" % config_path
    config_dict.write()

    # move the original aside
    if not dryrun:
        save_path(config_path)
        shutil.move(config_dict.filename, config_path)

def load_editor(driver):
    """Load the configuration editor from the driver file"""
    __import__(driver)
    driver_module = sys.modules[driver]
    loader_function = getattr(driver_module, 'confeditor_loader')
    editor = loader_function()
    return editor, driver_module.DRIVER_NAME, driver_module.DRIVER_VERSION

def get_driver_infos():
    """Scan the drivers folder, extracting information about each available driver.
    Return as a dictionary, keyed by driver name."""
    
    import weewx.drivers
    driver_directory = os.path.dirname(os.path.abspath(weewx.drivers.__file__))
    driver_list = [ os.path.basename(f) for f in glob.glob(os.path.join(driver_directory, "*.py"))]

    driver_info_dict = {}
    for driver_file in driver_list:
        if driver_file == '__init__.py':
            continue
        # Get the driver module name. This will be something like 'weewx.drivers.fousb'
        driver = os.path.splitext("weewx.drivers.%s" % driver_file)[0]
        # Create an entry for it
        driver_info_dict[driver] = dict()
        try:
            # Now import the driver, and extract info about it
            __import__(driver)
            driver_module = sys.modules[driver]
            driver_info_dict[driver]['name'] = driver_module.DRIVER_NAME
            driver_info_dict[driver]['version'] = driver_module.DRIVER_VERSION
        except Exception, e:
            driver_info_dict[driver]['name'] = driver
            driver_info_dict[driver]['fail'] = "%s" % e

    return driver_info_dict

def print_drivers():
    driver_info_dict = get_driver_infos()
    keys = sorted(driver_info_dict)
    for d in keys:
        msg = "%-25s" % d
        for x in ['name', 'version', 'fail']:
            if x in driver_info_dict[d]:
                msg += " %-15s" % driver_info_dict[d][x]
        print msg

if __name__=="__main__" :
    main()
    
