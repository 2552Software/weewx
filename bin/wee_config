#!/usr/bin/env python
#
#    Copyright (c) 2009-2015 Tom Keffer <tkeffer@gmail.com>
#
#    See the file LICENSE.txt for your full rights.
#
"""Configure the configuration file."""
from __future__ import with_statement

import os
import shutil
import sys
import syslog
import optparse
import tempfile

import configobj

import weewx
import weeutil.config
from weeutil.config import save_path, mkdir, _as_string

my_dir = os.path.abspath(os.path.dirname(__file__))
search_locations = [os.path.normpath(os.path.join(my_dir, '..')), '/etc/weewx', '/home/weewx']

minor_comment_block = [""]
major_comment_block = ["", "##############################################################################", ""]

usage="""wee_config --help
       wee_config --version
       wee_config --list-drivers
       wee_config --merge CONFIG_FILE|--config=CONFIG_FILE --template=TEMPLATE_FILE 
           [--output=OUTFILE] [--no-prompt]
       wee_config --driver=[DRIVER] CONFIG_FILE|--config=CONFIG_FILE 
           [--no-prompt]
       wee_config --station CONFIG_FILE|--config=CONFIG_FILE 
           [--latitude=yy.y] [--longitude=xx.x] [--altitude=zz,(foot|meter)] 
           [--description="Home Sweet Home"] [--no-prompt]
       wee_config --reports CONFIG_FILE|--config=CONFIG_FILE 
           [--units=(us|metric)] [--no-prompt]
           
COMMANDS (can be combined):

--version      Print the version of weewx, then exit.
--list-drivers List the available weewx device drivers, then exit.
--merge        Update an existing configuration file, then merge it into a template, 
               overwriting any options. The results can be written to a specified 
               destination OUTFILE or, if not specified, to the original
               configuration file (a backup will be made).
--driver       Add the specified driver to the configuration file, prompting if necessary.
--station      Configure the [Station] stanza, prompting if necessary.
--reports      Configure the [StdReport] stanza, prompting if necessary."""

description="""wee_config is used to configure your weewx configuration file (nominally, weewx.conf).
Its location can be given as a command-line argument, or it can be specified 
with option --config.

By default, the final results are writen to the same file name as the
configuration file. The original is backed up first. Alternatively, it
will be written to the destination given by the --output option.
"""

def driver_callback(option, opt, value, parser):
    print option
    print opt
    print value
    print parser
    return 'foobar'

def main():

    # Set defaults for the system logger:
    syslog.openlog('wee_config', syslog.LOG_PID|syslog.LOG_CONS)

    # Create a command line parser:
    parser = optparse.OptionParser(usage=usage, description=description)
    
    # Add the various options:
    parser.add_option("--version", action="store_true",
                      help="Print the version of weewx and exit.")
    parser.add_option("--list-drivers", action="store_true",
                     help="List all the available weewx device drivers, then exit.")
    parser.add_option("--merge", action="store_true",
                      help="Update an existing configuration file to the current version, then merge "
                      "it into a template.")
    parser.add_option("--driver", action="callback", callback=driver_callback, metavar="DRIVER", dest="driver",
                      help="Add the specified driver to the configuration file. "
                      "If DRIVER is not given, you will be prompted for it.")
    parser.add_option("--station", action="store_true",
                      help="Configure the [Station] stanza of the configuration file, prompting if necessary.")
    parser.add_option("--reports", action="store_true",
                      help="Configure the [StdReport] stanza of the configuration file, prompting if necessary.")
    parser.add_option("--config", dest="config_path", metavar="CONFIG_FILE",
                      help="Use configuration file CONFIG_FILE. Default is /etc/weewx/weewx.conf or /home/weewx/weewx.conf.")
    parser.add_option("--no-prompt", action="store_true",
                      help="Do not issue prompts. Take all options from the command-line.")
    parser.add_option("--template", metavar="TEMPLATE_FILE",
                      help="Start with the template TEMPLATE_FILE. The configuration file will be merged into this, " 
                      "overwriting any keys.")
    parser.add_option("--output", metavar="OUTPUT_FILE",
                      help="Where the results should be put. The default is to overwrite CONFIG_FILE, saving a backup first")
    parser.add_option("--latitude", metavar="yy.y",
                      help="The station latitude")
    parser.add_option("--longitude", metavar="xx.x",
                      help="The station longitude")
    parser.add_option("--altitude", metavar="zz,(FOOT|meter)",
                      help="The station altitude in either feet or meters. E.g., '750,foot'")
    parser.add_option("--description",
                      help="""A text description of the station. For example, "Santa's workshop, North Pole" """)
    parser.add_option("--units", choices=["us", "metric"], metavar="(metric|us)",
                      help="Set display units to 'metric' or 'us'")

    # Now we are ready to parse the command line:
    (options, args) = parser.parse_args()

    if options.version:
        print weewx.__version__
        sys.exit(0)

    if options.list_drivers:
        print_drivers()
        sys.exit(0)
        
    config_path, config_dict = weeutil.config.read_config(options.config_path, args, locations=search_locations)

    save_me = False    
    if options.merge:
        command_merge(config_dict, template=options.template)
        save_me = True
        
    if options.driver:
        print options.driver
    if save_me:
        
        # Save the resultant config file, backing up as necessary.
        
        if options.output:
            fd = open(options.output, 'w')
            config_dict.write(fd)
            fd.close()
        else:
            # Get a temporary file:
            tmpfile = tempfile.NamedTemporaryFile("w")
            
            # Write the merged configuration file to it:
            config_dict.write(tmpfile)
            tmpfile.flush()
            
            # Save the old config file if it exists:
            if os.path.exists(config_path):
                backup_path = weeutil.config.save_path(config_path)
                print "Saved old configuration file as %s" % backup_path
                
            # Now install the temporary file (holding the merged config data)
            # into the proper place:
            shutil.copyfile(tmpfile.name, config_path)
            
            sys.exit(0)

    else:
        sys.exit("Nothing done.")
    return 0

def command_merge(config_dict, template):
    
    if not template:
        print >>sys.stdout, "Merge command requires template file"
        exit(1)

    # Open up and parse the template:
    try:        
        template_dict = configobj.ConfigObj(template, file_error=True)
    except SyntaxError, e:
        print >>sys.stdout, "Syntax error in template '%s': %s" % (template, e)
        exit(1)

    weeutil.config.merge_config(config_dict, template_dict)

    
def get_station_info(config_dict):
    """Extract station info from config dictionary."""
    stn_info = dict()
    if config_dict is not None and 'Station' in config_dict:
        stn_info['location'] = _as_string(config_dict['Station'].get('location'))
        stn_info['latitude'] = config_dict['Station'].get('latitude')
        stn_info['longitude'] = config_dict['Station'].get('longitude')
        stn_info['altitude'] = config_dict['Station'].get('altitude')
        if 'station_type' in config_dict['Station']:
            stn_info['station_type'] = config_dict['Station']['station_type']
            if stn_info['station_type'] in config_dict:
                stn_info['driver'] = config_dict[stn_info['station_type']]['driver']
    return stn_info

def prompt_for_info(location=None, latitude=90.0, longitude=0.0,
                    altitude=(0, 'meter'), units='metric', **kwargs):
    
    # --- LOCATION ---
    print "Enter a brief description of the station, such as its location.  For example:"
    print "Santa's Workshop, North Pole"
    msg = "description [%s] > " % location if location is not None else "description > "
    ans = None
    while ans is None:
        ans = raw_input(msg).strip()
        if ans:
            location = ans

    # --- ALTITUDE ---
    print "Specify altitude, with units 'foot' or 'meter'.  For example:"
    print "35, foot"
    print "12, meter"
    msg = "altitude > " if altitude is None else "altitude [%s, %s] > " % tuple(altitude)

    ans = None
    while ans is None:
        ans = raw_input(msg).strip().lower()
        if ans and ans.find(',') > 0:
            parts = ans.split(',')
            try:
                unit = parts[1].strip()
                if unit in ['foot', 'meter']:
                    altitude = [float(parts[0].strip()), unit]
                else:
                    ans = None
            except (ValueError, TypeError):
                print >>sys.stderr, "Invalid response."
                ans = None
        elif ans == '':
            break
        else:
            ans = None

    # --- LATITUDE ---
    print "Specify latitude in decimal degrees, negative for south."
    msg = "latitude > " if latitude is None else "latitude [%s] > " % latitude 
    ans = None
    while ans is None:
        ans = raw_input(msg).strip()
        if ans:
            try:
                latitude = float(ans)
                if latitude < -90 or latitude > 90:
                    ans = None
            except (ValueError, TypeError):
                print >>sys.stderr, "Invalid response."
                ans = None
        elif ans == '':
            break
        else:
            ans = None
            
    # --- LONGITUDE ---
    print "Specify longitude in decimal degrees, negative for west."
    msg = "longitude > " if longitude is None else "longitude [%s] > " % longitude 
    ans = None
    while ans is None:
        ans = raw_input(msg).strip()
        if ans:
            try:
                longitude = float(ans)
                if latitude < -180 or latitude > 180:
                    ans = None
            except (ValueError, TypeError):
                print >>sys.stderr, "Invalid response."
                ans = None
        elif ans == '':
            break
        else:
            ans = None

    # --- UNITs ---
    print "Indicate the preferred units for display: 'metric' or 'us'"
    msg =  "units > " if units is None else "units [%s] > " % units
    ans = None
    while ans is None:
        ans = raw_input(msg).strip().lower()
        if ans in ['metric', 'us']:
            units = ans
        elif ans=='':
            break
        else:
            print >>sys.stderr, "Unrecognized response. Please try again."
            ans = None

    # Return the final results:
    return {'location' : location,
            'altitude' : altitude,
            'latitude' : latitude,
            'longitude': longitude,
            'units'    : units}

def prompt_for_driver(dflt_driver=None):
    """Get the information about each driver, return as a dictionary."""
    infos = weeutil.config.get_driver_infos()
    keys = sorted(infos)
    dflt_idx = None
    for i, d in enumerate(keys):
        print " %2d) %-15s (%s)" % (i, infos[d].get('name', '?'), d)
        if dflt_driver == d:
            dflt_idx = i
    msg = "choose a driver [%d]: " % dflt_idx if dflt_idx is not None else "choose a driver: "
    ans = None
    while ans is None:
        ans = raw_input(msg).strip()
        if not ans:
            ans = dflt_idx
        try:
            idx = int(ans)
            if idx < 0 or idx >= len(keys):
                ans = None
        except (ValueError, TypeError):
            ans = None
    return keys[idx]

def prompt_for_driver_settings(driver):
    """Let the driver prompt for any required settings."""
    settings = dict()
    __import__(driver)
    driver_module = sys.modules[driver]
    loader_function = getattr(driver_module, 'confeditor_loader')
    editor = loader_function()
    settings[driver_module.DRIVER_NAME] = editor.prompt_for_settings()
    return settings


def print_drivers():
    """Get information about all the available drivers, then print it out."""
    driver_info_dict = weeutil.config.get_driver_infos()
    keys = sorted(driver_info_dict)
    for d in keys:
        msg = "%-25s" % d
        for x in ['name', 'version', 'fail']:
            if x in driver_info_dict[d]:
                msg += " %-15s" % driver_info_dict[d][x]
        print msg



if __name__=="__main__" :
    main()
    
