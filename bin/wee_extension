#!/usr/bin/env python
#
#    Copyright (c) 2009-2015 Tom Keffer <tkeffer@gmail.com> and
#                            Matthew Wall
#
#    See the file LICENSE.txt for your full rights.
#
"""Install and remove extensions."""
from __future__ import with_statement

import sys
import os
import optparse
from subprocess import Popen, PIPE

import config_util
from config_util import Logger

usage = """wee_extension --help
       wee_extension --list
           [CONFIG_FILE|--config=CONFIG_FILE]
       wee_extension --install=(filename|directory)
           [CONFIG_FILE|--config=CONFIG_FILE]
           [--tmpdir==DIR] [--dry-run] [--verbosity=N]
       wee_extension --uninstall=EXTENSION
           [CONFIG_FILE|--config=CONFIG_FILE]
           [--verbosity=N]
           
COMMANDS:

--list:      List all installed extensions
--install:   Install the extension that can be found in the
             named file or directory.
--uninstall: Uninstall the given extension."""

description = "This utility can install/remove/list extensions to weewx"

def main():
    parser = optparse.OptionParser(description=description, usage=usage)
    parser.add_option('--list', action="store_true", dest="list_extensions", 
                      help="List all installed extensions")
    parser.add_option('--install', metavar="filename|directory",
                      help="Install the driver found in filename or directory")
    parser.add_option('--uninstall', metavar="EXTENSION",
                      help="Uninstall the extension with name EXTENSION")
    parser.add_option("--config", metavar="CONFIG_FILE",
                      help="Use configuration file CONFIG_FILE.")
    parser.add_option('--tmpdir', default='/var/tmp',
                      metavar="DIR", help='Use DIR as the temporary directory')
    parser.add_option('--bin-root', metavar="BIN_ROOT",
                      help="Look in BIN_ROOT for Python executables (useful for debugging)")
    parser.add_option('--dry-run', action='store_true',
                      help='Print what would happen but do not do it')
    parser.add_option('--verbosity', type=int, default=1,
                      metavar="N", help='How much status to spew, 0-3')
    
    # Now we are ready to parse the command line:
    (options, _args) = parser.parse_args()

    ext = ExtensionEngine(_args,
                          config=options.config,
                          tmpdir=options.tmpdir,
                          bin_root=options.bin_root,
                          dry_run=options.dry_run,
                          logger=Logger(verbosity=options.verbosity))
    
    if options.list_extensions:
        ext.enumerate_extensions()

    return 0

class ExtensionEngine(object):
    """Engine that manages extensions."""
    def __init__(self, args=None, config=None, tmpdir=None, bin_root=None, 
                 dry_run=None, logger=Logger()):
        self.logger = logger
        self.tmpdir = tmpdir
        self.dry_run = dry_run
        self.config_path, self.config_dict = config_util.read_config(config, args)
        # BIN_ROOT does not normally appear in the configuration dictionary. Set a
        # default (which could be 'None')
        self.config_dict.setdefault('BIN_ROOT', bin_root)
        self.root_dict = config_util.extract_roots(self.config_path, self.config_dict)
        self.logger.log("root dictionary: %s" % self.root_dict, 1)
        
    def enumerate_extensions(self):
        ext_root = self.root_dict['EXT_ROOT']
        try:
            exts = os.listdir(ext_root)
            if exts:
                for f in exts:
                    self.logger.log(f, level=0)
            else:
                self.logger.log("Extension cache is '%s'" % ext_root, level=2)
                self.logger.log("No extensions installed", level=0)
        except OSError:
            self.logger.log("No extension cache '%s'" % ext_root, level=2)
            self.logger.log("No extensions installed", level=0)
            
    def install_extension(self, extension_path):
        self.logger.log("Request to install %s" % extension_path)
        ifile = 'install'
        __import__(ifile)
        module = sys.modules[ifile]
        loader = getattr(module, 'loader')
        installer = loader()

        self.logger.log("Request to install extension %s" % extension_path)


        self.log("install_files", level=1)
        for t in installer['files']:
            dstdir = self.prepend_layout_path(t[0])
            try:
                self.log("mkdir %s" % dstdir, level=2)
                if self.doit:
                    mkdir(dstdir)
            except os.error:
                pass
            for f in t[1]:
                src = os.path.join(self.layout['EXTRACT_ROOT'], f)
                dst = self.prepend_layout_path(f)
                if os.path.exists(dst):
                    self.log("save existing file %s" % dst, level=2)
                    if self.doit:
                        save_path(dst)
                self.log("copy %s to %s" % (src, dst), level=2)
                if self.doit:
                    distutils.file_util.copy_file(src, dst)
                    


#         self.log("request to install %s" % self.filename)
#         self.layout_type = self.guess_type(self.layout_type)
#         self.layout = self.verify_layout(self.layout_type)
#         (self.basename, self.extdir, self.delete_extdir) = \
#             self.verify_installer(self.filename, self.tmpdir)
#         self.verify_src(self.extdir)
#         # everything is ok, so use the extdir
#         self.layout['EXTRACT_ROOT'] = self.extdir
#         self.load_installer(self.extdir, self.basename, self.layout)
#         self.installer.install()
#         self.cleanup()

#         self.install_files()
#         self.merge_config_options()
#         self.install_history()
        

if __name__=="__main__" :
    main()
    
